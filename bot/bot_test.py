import asyncio
import asyncpg
from telebot.async_telebot import AsyncTeleBot
from telebot import types, asyncio_filters
import random
import datetime
import string
from smtplib import SMTP
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage

bot = AsyncTeleBot(token='6236134779:AAF9IVmzQl2vAz9e5U8BCG8bqGECE_RzSUw', state_storage=StateMemoryStorage())

# Generate authentication code
async def generate_code():
    code = ''
    for i in range(6):
        code += str(random.randrange(10))
    return code


async def connect_db():
    return await asyncpg.connect(user="postgres", password="0802",
                                    database="lab_manager_database", host="127.0.0.1")


async def send_email(message, reciever):
    sender = "denisnepovis@mail.ru"
    password = "d5pVbceLH1pnpwzNn3ay"
    server = SMTP("smtp.mail.ru", 587)
    server.ehlo()
    server.starttls()
    server.login(sender, password)
    try:
        server.sendmail(sender, reciever, message)
    except Exception as e:
        print(e)
        await bot.send_message(reciever, "Error: Failed to send email.")
    server.quit()

# Just create different statesgroup
class MyStates(StatesGroup):
    is_authenticated = State() # statesgroup should contain states
    new_guest = State() # statesgroup should contain states
    email = State() # statesgroup should contain states
    auth_code_recv = State()

# set_state -> sets a new state
# delete_state -> delets state if exists
# get_state -> returns state if exists
LOG = True

# Start command handler
@bot.message_handler(commands=['start'])
async def start_command_handler(message: types.Message):
    await check_authenticated(message)

     
async def check_authenticated(message):
    conn = await connect_db()
    values = await conn.fetch(f"""select tg_chat_id from users WHERE tg_chat_id = '{message.chat.id}'""")
    print(f"""select tg_chat_id from users WHERE tg_chat_id = '{message.chat.id}'""")
    print(values) # DELETE
    await conn.close()

    if not values:
        # values is an empty list
        #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–≥-–±–æ—Ç–æ–º
        await bot.set_state(message.from_user.id, MyStates.new_guest, message.chat.id)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        auth_button = types.KeyboardButton('ü¶Ñ –ü—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é ü¶Ñ')
        markup.add(auth_button)
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.", reply_markup=markup)
    else:
        await bot.set_state(message.from_user.id, MyStates.is_authenticated, message.chat.id)
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        auth_button = types.KeyboardButton('üåä –ú–µ–Ω—é üåä')
        markup.add(auth_button)
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {}! –ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–µ–Ω—é:".format(message.from_user.username), reply_markup=markup)    

# Authorization button handler
@bot.message_handler(func=lambda message: message.text == 'ü¶Ñ –ü—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é ü¶Ñ')
async def auth_button_handler(message: types.Message):
    state = await bot.get_state(message.chat.id)
    #print(state)
    if state == 'MyStates:new_guest':
        #markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup = types.ReplyKeyboardRemove()
        #markup.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"))
        await bot.set_state(message.from_user.id, MyStates.email, message.chat.id)
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.", reply_markup=markup)



# Menu button handler
@bot.message_handler(func=lambda message: message.text == 'üåä –ú–µ–Ω—é üåä')
async def auth_button_handler(message: types.Message):
    state = await bot.get_state(message.chat.id)
    print(state)
    if state == 'MyStates:is_authenticated':
        markup = types.ReplyKeyboardMarkup()
        button_plans = types.KeyboardButton('–º–æ–∏ –ø–ª–∞–Ω—ã')
        close_deadlines = types.KeyboardButton('—Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤')
        button_report = types.KeyboardButton('–æ—Ç—á–µ—Ç')
        markup.row(button_plans)
        markup.row(close_deadlines)
        markup.row(button_report)
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

    else:
        print('not is_authenticated')
        await check_authenticated(message) 



@bot.message_handler(func=lambda message: message.text == '–º–æ–∏ –ø–ª–∞–Ω—ã')
async def auth_button_handler(message: types.Message):
    state = await bot.get_state(message.chat.id)
    print(state)
    if state == 'MyStates:is_authenticated':
        await get_plans_from_db(message)
    else:
        print('not is_authenticated')
        await check_authenticated(message) 


async def get_plans_from_db(message):
    conn = await connect_db()
    values = await conn.fetch(f"""select\
    subjects.name, plans.name, users.username, deadlines.deadline_time, plans.status, deadlines.specifier, deadlines.deadline_status\
    from users\
    join plans\
    on plans.user_id = users.id\
    join subjects\
    on subjects.plan_id = plans.id\
    join deadlines\
    on subjects.id = deadlines.subject_id\
    where users.tg_chat_id = '{message.chat.id}'\
    order by plans.name, deadline_time""")
    #print(values) # DELETE 
    await conn.close()

    if not values:
        # values is an empty list
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        auth_button = types.KeyboardButton('üåä –ú–µ–Ω—é üåä')
        markup.add(auth_button)
        await bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤", reply_markup=markup)
    else:
        await bot.set_state(message.from_user.id, MyStates.is_authenticated, message.chat.id)
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        auth_button = types.KeyboardButton('üåä –ú–µ–Ω—é üåä')
        markup.add(auth_button)
        plans = ""
        print(values)
        deadline_status = ""
        for i, record in enumerate(values):
            if record[6] == True:
                deadline_status = "active"
            else:
                deadline_status = "inactive"
            if i == 0 or values[i][1]!=values[i-1][1]:
                plans += f"{i+1}.üìå –ü–ª–∞–Ω: {record[1]}, —Å—Ç–∞—Ç—É—Å: {record[4]} \n"
            plans += f"üéØ–î–µ–¥–ª–∞–π–Ω: {record[5]}, —Å—Ç–∞—Ç—É—Å: {deadline_status}\nüéì–ü—Ä–µ–¥–º–µ—Ç: {record[0]}\n‚è≥–î–∞—Ç–∞: {record[3]}\n"
            plans += "--------------------------------------------\n"
        await bot.send_message(message.chat.id, plans, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '—Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤')
async def auth_button_handler(message: types.Message):
    state = await bot.get_state(message.chat.id)
    print(state)
    if state == 'MyStates:is_authenticated':
        await get_soon_deadlines(message)
    else:
        print('not is_authenticated')
        await check_authenticated(message) 


async def get_soon_deadlines(message):
    conn = await connect_db()
    values = await conn.fetch(f"""select\
    subjects.name, plans.name, users.username, deadlines.deadline_time\
    from users\
    join plans\
    on plans.user_id = users.id\
    join subjects\
    on subjects.plan_id = plans.id\
    join deadlines\
    on subjects.id = deadlines.subject_id\
    where users.tg_chat_id = '{message.chat.id}' and plans.status = 'active' and deadline_status = True\
    order by deadline_time\
    limit 5""")
    print(values) # DELETE 
    await conn.close()

    if not values:
        # values is an empty list
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        auth_button = types.KeyboardButton('üåä –ú–µ–Ω—é üåä')
        markup.add(auth_button)
        await bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏", reply_markup=markup)
    else:
        await bot.set_state(message.from_user.id, MyStates.is_authenticated, message.chat.id)
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        auth_button = types.KeyboardButton('üåä –ú–µ–Ω—é üåä')
        markup.add(auth_button)
        deadlines = ""
        for i, recordww in enumerate(values):
           deadlines += f"{i+1}. --------------------------------------------\nüéì–ü—Ä–µ–¥–º–µ—Ç: {recordww[0]}\n‚è≥–î–∞—Ç–∞: {recordww[3]}\nüìå–ü–ª–∞–Ω: {recordww[1]}\n"

        await bot.send_message(message.chat.id, deadlines, reply_markup=markup)


@bot.message_handler(state="*", commands='cancel')
async def any_state(message):
    """
    Cancel state
    """
    await bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞")
    await bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(state=MyStates.email)
async def name_get(message):
    """
    State 1. Will process when user's state is MyStates.email.
    """
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['email'] = message.text
        #–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π
        conn = await connect_db()
        values = await conn.fetch(f"""SELECT email FROM users WHERE email = '{data['email']}'""")
        await conn.close()

        if not values:
            # values is an empty list
            #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ(
            await bot.delete_state(message.from_user.id, message.chat.id)  #!!!! –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
            await bot.set_state(message.from_user.id, MyStates.new_guest, message.chat.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            auth_button = types.KeyboardButton('ü¶Ñ –ü—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é ü¶Ñ')
            markup.add(auth_button)
            await bot.send_message(message.chat.id, f'–û–π, –∫–∞–∂–µ—Ç—Å—è —ç—Ç–∞ –ø–æ—á—Ç–∞ –Ω–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—á—Ç—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ. –õ–∏–±–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ –≤—ã –Ω–µ –¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ —Ä–∞–Ω–µ–µ.', reply_markup=markup)
        else:
            auth_code = await generate_code()
            data['auth_code_sent'] = auth_code
            msg = 'One-Time Password for Sign In: ' + auth_code
            await send_email(msg, message.text)
            await bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –ø–æ—á—Ç—É. –í–µ–¥–∏—Ç–µ –µ–≥–æ:')
            await bot.set_state(message.from_user.id, MyStates.auth_code_recv, message.chat.id)

@bot.message_handler(state=MyStates.auth_code_recv)
async def name_get(message):
    """
    State 2. Will process when user's state is MyStates.auth_code_recv.
    """
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['auth_code_recv'] = message.text
        if data['auth_code_sent'] == data['auth_code_recv']:
            #–ø—ã—Ç–∞–µ–º—Å—è –≤–Ω–µ—Å—Ç–∏ tg_chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
            conn = await connect_db()
            values = await conn.fetch(f"""UPDATE users SET tg_chat_id = '{message.chat.id}' WHERE email = '{data['email']}'""")
            await conn.close() 
            print(values) # DELETE

            if values == 'UPDATE 0':
            #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ(
                await bot.send_message(message.chat.id, f'–û–π, –∫–∞–∂–µ—Ç—Å—è —ç—Ç–∞ –ø–æ—á—Ç–∞ –Ω–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—á—Ç—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ. –õ–∏–±–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ –≤—ã –Ω–µ –¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ —Ä–∞–Ω–µ–µ.')
                await bot.delete_state(message.from_user.id, message.chat.id)
                await bot.set_state(message.from_user.id, MyStates.new_guest, message.chat.id)
            
            await bot.set_state(message.from_user.id, MyStates.is_authenticated, message.chat.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            auth_button = types.KeyboardButton('üåä –ú–µ–Ω—é üåä')
            markup.add(auth_button)
            await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø—Ä–æ—à–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=markup)
        else:
            #–≤–≤–µ–¥–µ–Ω—ã–π –∫–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–ª —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º
            await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ email.")
            await bot.delete_state(message.from_user.id, message.chat.id)
            await bot.set_state(message.from_user.id, MyStates.new_guest, message.chat.id)


async def check_deadlines_every_evening():
    conn = await connect_db()
    values = await conn.fetch(f"""select\
    subjects.name, plans.name, users.username, deadlines.deadline_time\
    from users\
    join plans\
    on plans.user_id = users.id\
    join subjects\
    on subjects.plan_id = plans.id\
    join deadlines\
    on subjects.id = deadlines.subject_id\
    where users.tg_chat_id = '{message.chat.id}' and plans.status = 'active' and deadline_status = True\
    order by deadline_time\
    limit 5""")
    print(values) # DELETE 
    await conn.close()
    print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!')

# –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def check_time_and_send():
    while True:
        current_time = datetime.datetime.now().time()
        
        if current_time >= datetime.time(11, 0) and current_time <= datetime.time(12, 0):
        #if current_time >= datetime.time(19, 0) and current_time <= datetime.time(20, 0):
            await check_deadlines_every_evening()
        await asyncio.sleep(6 * 60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–µ n * 60 



async def run():
    while True:
        conn = await connect_db()
        values = await conn.fetch("""select * from users""")
        await bot.send_message(404247225, values)
        await conn.close()
        await asyncio.sleep(3600)


async def main():
    bot.add_custom_filter(asyncio_filters.StateFilter(bot))
    asyncio.create_task(check_time_and_send())
    await asyncio.sleep(1)
    await bot.infinity_polling()


if __name__ == '__main__':
    asyncio.run(main())